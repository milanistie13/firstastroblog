---
import { type CollectionEntry, getCollection, render } from "astro:content";
import Layout from "@layouts/Layout.astro";
import Container from "@components/Container.astro";
import FormattedDate from "@components/FormattedDate.astro";
import { readingTime, capitalizeWords } from "@lib/utils";
import BackToPrevious from "@components/BackToPrevious.astro";
import PostNavigation from "@components/PostNavigation.astro";
import TableOfContents from "@components/TableOfContents.astro";
import Breadcrumb from "@components/Breadcrumb.astro";

export async function getStaticPaths() {
  const posts = (await getCollection("blog"))
    .filter((post) => !post.data.draft)
    .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());
  return posts.map((post) => ({
    params: { 
      category: post.data.category?.toLowerCase().replace(/\s+/g, '-') || 'uncategorized', 
      blogpost: post.id.replace(/\/index\.mdx?$/, '')
    },
    props: post,
  }));
}
type Props = CollectionEntry<"blog">;

const posts = (await getCollection("blog"))
  .filter((post) => !post.data.draft)
  .sort((a, b) => b.data.date.valueOf() - a.data.date.valueOf());

function getNextPost() {
  let postIndex;
  for (const post of posts) {
    if (post.slug === Astro.params.blogpost) {
      postIndex = posts.indexOf(post);
      if(postIndex + 1 < posts.length) {
        return posts[postIndex + 1];
      } else {
        return null;
      }
    }
  }
}

function getPrevPost() {
  let postIndex;
  for (const post of posts) {
    if (post.slug === Astro.params.blogpost) {
      postIndex = posts.indexOf(post);
      if(postIndex - 1 >= 0) {
        return posts[postIndex - 1];
      } else {
        return null;
      }
    }
  }
}

const nextPost = getNextPost();
const prevPost = getPrevPost();

const post = Astro.props;
const { Content, headings } = await render(post);

const postUrl = `https://shopperqueries.com/${Astro.params.category}/${post.id.replace(/\/index\.mdx?$/, '')}`;
const canonicalUrl = postUrl;

const breadcrumbItems = [
  { label: 'Home', href: '/' },
  { label: 'Blog', href: '/' },
  { 
    label: post.data.category || 'Uncategorized', 
    href: post.data.category 
      ? `/categories/${post.data.category.toLowerCase().replace(/\s+/g, '-')}` 
      : '/categories' 
  },
  { label: post.data.title }
];
---

<Layout title={post.data.title} description={post.data.description}>
  <script is:inline type="application/ld+json">
    {JSON.stringify({
      "@context": "https://schema.org",
      "@type": "BlogPosting",
      "headline": post.data.title,
      "description": post.data.description,
      "datePublished": post.data.date.toISOString(),
      "author": {
        "@type": "Person",
        "name": "Shopperqueries Team",
        "url": "https://shopperqueries.com"
      },
      "image": post.data.image || "https://shopperqueries.com/default-image.jpg",
      "mainEntityOfPage": {
        "@type": "WebPage",
        "@id": postUrl
      },
      "url": postUrl,
      "keywords": post.data.tags?.join(", ") || "",
      "articleSection": post.data.category || "Uncategorized"
    })}
  </script>
  <link rel="canonical" href={canonicalUrl} />
  <Container>
    <Breadcrumb items={breadcrumbItems} />
    <div class="animate">
      <BackToPrevious href="/">Back to blog</BackToPrevious>
    </div>
    <div class="my-10 space-y-1">
      <div class="animate flex items-center gap-1.5">
        <div class="font-base text-sm">
          <FormattedDate date={post.data.date} />
        </div>
        &bull;
        {post.body && (
          <div class="font-base text-sm">
            {readingTime(post.body)}
          </div>
        )}        
      </div>
      <h1 class="animate text-3xl font-semibold text-black dark:text-white">
        {post.data.title}
      </h1>
      {
        post.data.tags && post.data.tags?.length > 0 ? (
          <div class="animate flex items-center gap-2 pt-1">
            <span class="text-sm font-medium text-gray-600 dark:text-gray-400">Tags:</span>
            <div class="flex gap-2">
              {post.data.tags.map((tag) => (
                <a
                  href={`/tags/${tag.toLowerCase()}`}
                  class="rounded-full bg-blue-100 text-blue-800 px-2 py-1 text-xs transition-colors duration-300 ease-in-out hover:bg-blue-200 dark:bg-blue-900 dark:text-blue-300 dark:hover:bg-blue-800"
                >
                  {capitalizeWords(tag)}
                </a>
              ))}
            </div>
          </div>
        ) : null
      }
      {
        post.data.category ? (
          <div class="animate flex items-center gap-2 pt-1">
            <span class="text-sm font-medium text-gray-600 dark:text-gray-400">Category:</span>
            <a
              href={`/categories/${post.data.category.toLowerCase().replace(/\s+/g, '-')}`}
              class="rounded-full bg-green-100 text-green-800 px-2 py-1 text-xs transition-colors duration-300 ease-in-out hover:bg-green-200 dark:bg-green-900 dark:text-green-300 dark:hover:bg-green-800"
            >
              {capitalizeWords(post.data.category)}
            </a>
          </div>
        ) : null
      }
    </div>
    {headings.length > 0 && <TableOfContents headings={headings} />}
    <article class="animate">
      <Content />
      <div class="mt-24">
        <PostNavigation 
          prevPost={prevPost} 
          nextPost={nextPost} 
          category={Astro.params.category} 
          blogpost={Astro.params.blogpost} 
        />
      </div>
    </article>
  </Container>
</Layout>
